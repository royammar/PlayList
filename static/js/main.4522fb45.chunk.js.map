{"version":3,"sources":["logo.svg","services/PlayListService.js","cmps/VideoPreview.jsx","cmps/VideoList.jsx","pages/PlaylistPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getPlayList","term","a","console","log","Axios","get","data","VideoPreview","item","getUrl","id","kind","className","onClick","videoId","src","snippet","thumbnails","medium","url","alt","title","VideoList","playList","map","key","PlaylistPage","state","currVideo","getvideo","PlayListService","x","setState","items","str","Fragment","minLength","placeholder","debounceTimeout","onChange","event","target","value","width","height","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,qNCY5B,GAEXC,Y,yFAIJ,WAA2BC,GAA3B,iBAAAC,EAAA,6DACAC,QAAQC,IAAI,QADZ,SAGoBC,IAAMC,IAAN,oFAAuFL,EAAvF,iDAHpB,uBAGOM,EAHP,EAGOA,KACPJ,QAAQC,IAAIG,EAAK,QAJjB,kBAKSA,GALT,4C,sBChBe,SAASC,EAAT,GAAsC,IAAfC,EAAc,EAAdA,KAAKC,EAAS,EAATA,OACvC,MACmB,kBAAfD,EAAKE,GAAGC,MACR,yBAAKC,UAAU,gBACf,yBAAKA,UAAU,QAAQC,QAAS,kBAAIJ,EAAOD,EAAKE,GAAGI,UAAUC,IAAKP,EAAKQ,QAAQC,WAAWC,OAAOC,IAAKC,IAAI,KAC1G,yBAAKR,UAAU,cAAcJ,EAAKQ,QAAQK,QCJnC,SAASC,EAAT,GAAuC,IAAnBC,EAAkB,EAAlBA,SAASd,EAAS,EAATA,OACxC,OACI,yBAAKG,UAAU,gBACdW,EAASC,KAAI,SAAAhB,GAAI,OAAG,kBAACD,EAAD,CAAckB,IAAKjB,EAAKE,GAAGI,QAAUL,OAAQA,EAAQD,KAAMA,Q,ICDnEkB,E,2MAGjBC,MAAQ,CACJJ,SAAU,GACVK,UAAW,I,EAMfC,S,uCAAW,WAAO7B,GAAP,eAAAC,EAAA,sEACO6B,EAAgB/B,YAAYC,GADnC,OACH+B,EADG,OAEP,EAAKC,SAAS,CAAET,SAAUQ,EAAEE,QAFrB,2C,wDAMXxB,OAAS,SAACC,GACN,IAAIwB,EAAG,wCAAoCxB,EAApC,eACP,EAAKsB,SAAS,CAAEJ,UAAWM,K,wEAMrB,IAAD,OACL,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,gBAAD,CACIC,UAAW,EACXC,YAAY,SACZC,gBAAiB,IACjBC,SAAU,SAAAC,GAAK,OAAI,EAAKX,SAASW,EAAMC,OAAOC,UAElD,yBAAK9B,UAAU,gBACX,4BAAQ+B,MAAM,MAAMC,OAAO,MACvB7B,IAAK8B,KAAKlB,MAAMC,UAAWR,IAAI,SADnC,KAGA,kBAACE,EAAD,CAAWb,OAAQoC,KAAKpC,OAAQc,SAAUsB,KAAKlB,MAAMJ,iB,GAtC/BuB,aCU3BC,MAVf,WAGE,OACI,yBAAKnC,UAAU,cACf,kBAAC,EAAD,QCEcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.4522fb45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Axios from 'axios'\r\n\r\n// var axios = Axios.create({\r\n//     withCredentials: true,\r\n//     headers: {\r\n//         'Access-Control-Allow-Origin': '*',\r\n//     }\r\n// });\r\n\r\n\r\nconst BASE_URL = '//localhost:3000/book'\r\n\r\nexport default {\r\n  \r\n    getPlayList,\r\n \r\n}\r\n\r\nasync function getPlayList(term){\r\nconsole.log('here');\r\n\r\nconst {data}=await  Axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=${term}&key=AIzaSyAig7ksAjASkE5RlOdU9D3laVy0XpAf3Bw`)\r\nconsole.log(data,'data');\r\n  return data\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function VideoPreview({item,getUrl}) {\r\n    return (\r\n        item.id.kind===\"youtube#video\" &&\r\n        <div className=\"item-preview\">\r\n        <img className=\"image\" onClick={()=>getUrl(item.id.videoId)} src={item.snippet.thumbnails.medium.url} alt=\"\"/>    \r\n        <div className=\"item-title\">{item.snippet.title}</div>\r\n        {/* <div>{item.snippet.description}</div> */}\r\n        </div>\r\n\r\n    \r\n    )\r\n}\r\n","import React from 'react'\r\nimport VideoPreview from './VideoPreview'\r\n\r\nexport default function VideoList({playList,getUrl}) {\r\n    return (\r\n        <div className=\"list-wrapper\">\r\n        {playList.map(item=> <VideoPreview key={item.id.videoId}  getUrl={getUrl} item={item}></VideoPreview>\r\n        )}\r\n        </div>\r\n       \r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { debounce } from \"debounce\";\r\nimport { DebounceInput } from 'react-debounce-input';\r\nimport PlayListService from '../services/PlayListService'\r\nimport VideoList from '../cmps/VideoList';\r\nexport default class PlaylistPage extends Component {\r\n\r\n\r\n    state = {\r\n        playList: [],\r\n        currVideo: \"\",\r\n    }\r\n\r\n\r\n\r\n\r\n    getvideo = async (term) => {\r\n        let x = await PlayListService.getPlayList(term)\r\n        this.setState({ playList: x.items })\r\n\r\n    }\r\n\r\n    getUrl = (id) => {\r\n        let str = `https://www.youtube.com/embed/${id}?autoplay=1`\r\n        this.setState({ currVideo: str })\r\n\r\n        //   return str\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <DebounceInput\r\n                    minLength={2}\r\n                    placeholder=\"Search\"\r\n                    debounceTimeout={1000}\r\n                    onChange={event => this.getvideo(event.target.value)} />\r\n                {/* {this.state.playList.length>0&& */}\r\n                <div className=\"main-wrapper\">\r\n                    <iframe width=\"420\" height=\"315\"\r\n                        src={this.state.currVideo} alt=\"video\"> </iframe>\r\n                    {/* } */}\r\n                    <VideoList getUrl={this.getUrl} playList={this.state.playList}></VideoList>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PlaylistPage from './pages/PlaylistPage';\n\nfunction App() {\n\n\n  return (\n      <div className=\"App-header\">\n      <PlaylistPage></PlaylistPage>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}